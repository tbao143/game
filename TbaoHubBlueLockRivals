--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.8) ~  Much Love, Ferib 

]]--

local obf_stringchar = string.char;
local obf_stringbyte = string.byte;
local obf_stringsub = string.sub;
local obf_bitlib = bit32 or bit;
local obf_XOR = obf_bitlib.bxor;
local obf_tableconcat = table.concat;
local obf_tableinsert = table.insert;
local function LUAOBFUSACTOR_DECRYPT_STR_0(LUAOBFUSACTOR_STR, LUAOBFUSACTOR_KEY)
	local result = {};
	for i = 2 - 1, #LUAOBFUSACTOR_STR do
		obf_tableinsert(result, obf_stringchar(obf_XOR(obf_stringbyte(obf_stringsub(LUAOBFUSACTOR_STR, i, i + (2 - 1))), obf_stringbyte(obf_stringsub(LUAOBFUSACTOR_KEY, (1 - 0) + (i % #LUAOBFUSACTOR_KEY), 1 + (i % #LUAOBFUSACTOR_KEY) + (2 - 1)))) % (875 - (555 + 64))));
	end
	return obf_tableconcat(result);
end
local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 932 - (857 + 74);
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 573 - (367 + 201)), LUAOBFUSACTOR_DECRYPT_STR_0("\159\141", "\126\177\163\187\69\134\219\167"), function(byte)
		if (Byte(byte, 929 - (214 + 713)) == (21 + 60)) then
			local FlatIdent_95CAC = 0;
			while true do
				if (FlatIdent_95CAC ~= (0 + 0)) then
				else
					repeatNext = StrToNumber(Sub(byte, 878 - (282 + 595), 1638 - (1523 + 114)));
					return "";
				end
			end
		else
			local FlatIdent_44265 = 0 + 0;
			local a;
			while true do
				if (0 ~= FlatIdent_44265) then
				else
					a = Char(StrToNumber(byte, 22 - 6));
					if repeatNext then
						local FlatIdent_15A17 = 0;
						local b;
						while true do
							if (FlatIdent_15A17 ~= 1) then
							else
								return b;
							end
							if (FlatIdent_15A17 ~= 0) then
							else
								b = Rep(a, repeatNext);
								repeatNext = nil;
								FlatIdent_15A17 = 1;
							end
						end
					else
						return a;
					end
					break;
				end
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local FlatIdent_76979 = 0;
			local Res;
			while true do
				if (FlatIdent_76979 ~= (1065 - (68 + 997))) then
				else
					Res = (Bit / ((1272 - (226 + 1044)) ^ (Start - 1))) % ((8 - 6) ^ (((End - (118 - (32 + 85))) - (Start - 1)) + 1 + 0));
					return Res - (Res % 1);
				end
			end
		else
			local Plc = 2 ^ (Start - (1 + 0));
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8()
		local FlatIdent_69270 = 0;
		local a;
		while true do
			if (FlatIdent_69270 ~= 1) then
			else
				return a;
			end
			if (FlatIdent_69270 == (957 - (892 + 65))) then
				a = Byte(ByteString, DIP, DIP);
				DIP = DIP + 1;
				FlatIdent_69270 = 2 - 1;
			end
		end
	end
	local function gBits16()
		local FlatIdent_7126A = 0;
		local a;
		local b;
		while true do
			if (FlatIdent_7126A ~= 1) then
			else
				return (b * (472 - 216)) + a;
			end
			if (FlatIdent_7126A ~= 0) then
			else
				a, b = Byte(ByteString, DIP, DIP + 2);
				DIP = DIP + (3 - 1);
				FlatIdent_7126A = 351 - (87 + 263);
			end
		end
	end
	local function gBits32()
		local FlatIdent_2661B = 180 - (67 + 113);
		local a;
		local b;
		local c;
		local d;
		while true do
			if (FlatIdent_2661B == (1 + 0)) then
				return (d * (41190819 - 24413603)) + (c * 65536) + (b * (189 + 67)) + a;
			end
			if (FlatIdent_2661B == 0) then
				a, b, c, d = Byte(ByteString, DIP, DIP + (11 - 8));
				DIP = DIP + 4;
				FlatIdent_2661B = 953 - (802 + 150);
			end
		end
	end
	local function gFloat()
		local FlatIdent_2593F = 0;
		local Left;
		local Right;
		local IsNormal;
		local Mantissa;
		local Exponent;
		local Sign;
		while true do
			if (FlatIdent_2593F ~= 3) then
			else
				if (Exponent == 0) then
					if (Mantissa == (0 - 0)) then
						return Sign * (0 - 0);
					else
						local FlatIdent_89917 = 0 + 0;
						while true do
							if (FlatIdent_89917 == (997 - (915 + 82))) then
								Exponent = 1;
								IsNormal = 0 - 0;
								break;
							end
						end
					end
				elseif (Exponent ~= (1193 + 854)) then
				else
					return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
				end
				return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ (68 - 16))));
			end
			if (FlatIdent_2593F ~= (1187 - (1069 + 118))) then
			else
				Left = gBits32();
				Right = gBits32();
				FlatIdent_2593F = 2 - 1;
			end
			if (FlatIdent_2593F ~= (1 - 0)) then
			else
				IsNormal = 1 + 0;
				Mantissa = (gBit(Right, 1, 20) * ((3 - 1) ^ 32)) + Left;
				FlatIdent_2593F = 2 + 0;
			end
			if (FlatIdent_2593F ~= 2) then
			else
				Exponent = gBit(Right, 812 - (368 + 423), 31);
				Sign = ((gBit(Right, 100 - 68) == 1) and -(19 - (10 + 8))) or 1;
				FlatIdent_2593F = 11 - 8;
			end
		end
	end
	local function gString(Len)
		local Str;
		if not Len then
			local FlatIdent_7366E = 442 - (416 + 26);
			while true do
				if (0 ~= FlatIdent_7366E) then
				else
					Len = gBits32();
					if (Len == 0) then
						return "";
					end
					break;
				end
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 3 - 2, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local FlatIdent_43862 = 0;
			local Type;
			local Cons;
			while true do
				if (0 ~= FlatIdent_43862) then
				else
					Type = gBits8();
					Cons = nil;
					FlatIdent_43862 = 1;
				end
				if (FlatIdent_43862 == 1) then
					if (Type == 1) then
						Cons = gBits8() ~= 0;
					elseif (Type == 2) then
						Cons = gFloat();
					elseif (Type ~= (433 - (44 + 386))) then
					else
						Cons = gString();
					end
					Consts[Idx] = Cons;
					break;
				end
			end
		end
		Chunk[1489 - (998 + 488)] = gBits8();
		for Idx = 1, gBits32() do
			local FlatIdent_781F8 = 0;
			local Descriptor;
			while true do
				if (FlatIdent_781F8 ~= 0) then
				else
					Descriptor = gBits8();
					if (gBit(Descriptor, 1 + 0, 1) == 0) then
						local Type = gBit(Descriptor, 2 + 0, 3);
						local Mask = gBit(Descriptor, 4, 6);
						local Inst = {gBits16(),gBits16(),nil,nil};
						if (Type == (1138 - (116 + 1022))) then
							Inst[3] = gBits16();
							Inst[16 - 12] = gBits16();
						elseif (Type == 1) then
							Inst[3] = gBits32();
						elseif (Type == (2 + 0)) then
							Inst[3] = gBits32() - ((7 - 5) ^ (56 - 40));
						elseif (Type ~= (862 - (814 + 45))) then
						else
							local FlatIdent_829F9 = 0;
							while true do
								if (FlatIdent_829F9 ~= 0) then
								else
									Inst[3] = gBits32() - ((4 - 2) ^ 16);
									Inst[4] = gBits16();
									break;
								end
							end
						end
						if (gBit(Mask, 1, 1) == (1 + 0)) then
							Inst[1 + 1] = Consts[Inst[887 - (261 + 624)]];
						end
						if (gBit(Mask, 3 - 1, 2) == 1) then
							Inst[1083 - (1020 + 60)] = Consts[Inst[3]];
						end
						if (gBit(Mask, 1426 - (630 + 793), 9 - 6) == (4 - 3)) then
							Inst[4] = Consts[Inst[2 + 2]];
						end
						Instrs[Idx] = Inst;
					end
					break;
				end
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - (3 - 2)] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1748 - (760 + 987)];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1914 - (1789 + 124);
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + (767 - (745 + 21))];
				else
					Stk[Idx] = Args[Idx + 1 + 0];
				end
			end
			local Varargsz = (PCount - Params) + (2 - 1);
			local Inst;
			local Enum;
			while true do
				local FlatIdent_10DED = 0 - 0;
				while true do
					if (FlatIdent_10DED ~= (1 + 0)) then
					else
						if (Enum <= 50) then
							if (Enum <= (19 + 5)) then
								if (Enum <= 11) then
									if (Enum <= 5) then
										if (Enum <= 2) then
											if (Enum <= 0) then
												Stk[Inst[1057 - (87 + 968)]] = Env[Inst[13 - 10]];
											elseif (Enum == 1) then
												if (Inst[2 + 0] < Stk[Inst[4]]) then
													VIP = VIP + 1;
												else
													VIP = Inst[3];
												end
											else
												local FlatIdent_7147 = 0 - 0;
												local A;
												while true do
													if (FlatIdent_7147 == 0) then
														A = Inst[1415 - (447 + 966)];
														do
															return Unpack(Stk, A, Top);
														end
														break;
													end
												end
											end
										elseif (Enum <= (8 - 5)) then
											if Stk[Inst[1819 - (1703 + 114)]] then
												VIP = VIP + (702 - (376 + 325));
											else
												VIP = Inst[4 - 1];
											end
										elseif (Enum == 4) then
											Stk[Inst[2]] = Inst[3] ~= 0;
										else
											local FlatIdent_360E8 = 0;
											local A;
											while true do
												if (FlatIdent_360E8 ~= (0 - 0)) then
												else
													A = Inst[1 + 1];
													do
														return Stk[A](Unpack(Stk, A + (2 - 1), Inst[17 - (9 + 5)]));
													end
													break;
												end
											end
										end
									elseif (Enum <= 8) then
										if (Enum <= 6) then
											for Idx = Inst[2], Inst[3] do
												Stk[Idx] = nil;
											end
										elseif (Enum > 7) then
											Stk[Inst[378 - (85 + 291)]] = Inst[1268 - (243 + 1022)];
										else
											local FlatIdent_7B2D6 = 0;
											local A;
											while true do
												if (FlatIdent_7B2D6 ~= 0) then
												else
													A = Inst[7 - 5];
													Stk[A](Unpack(Stk, A + 1, Top));
													break;
												end
											end
										end
									elseif (Enum <= (8 + 1)) then
										local FlatIdent_65194 = 1180 - (1123 + 57);
										local A;
										while true do
											if (FlatIdent_65194 == 0) then
												A = Inst[2];
												Stk[A] = Stk[A](Stk[A + 1]);
												break;
											end
										end
									elseif (Enum > 10) then
										local FlatIdent_86E18 = 0;
										local A;
										while true do
											if (FlatIdent_86E18 ~= 0) then
											else
												A = Inst[2];
												do
													return Unpack(Stk, A, Top);
												end
												break;
											end
										end
									else
										local FlatIdent_163A8 = 0;
										local A;
										local Results;
										local Edx;
										while true do
											if (FlatIdent_163A8 ~= 1) then
											else
												Edx = 0;
												for Idx = A, Inst[4 + 0] do
													local FlatIdent_61B23 = 254 - (163 + 91);
													while true do
														if (FlatIdent_61B23 ~= 0) then
														else
															Edx = Edx + (1931 - (1869 + 61));
															Stk[Idx] = Results[Edx];
															break;
														end
													end
												end
												break;
											end
											if (FlatIdent_163A8 ~= 0) then
											else
												A = Inst[1 + 1];
												Results = {Stk[A](Unpack(Stk, A + 1, Inst[3]))};
												FlatIdent_163A8 = 1;
											end
										end
									end
								elseif (Enum <= 17) then
									if (Enum <= 14) then
										if (Enum <= 12) then
											if Stk[Inst[2]] then
												VIP = VIP + (1 - 0);
											else
												VIP = Inst[1 + 2];
											end
										elseif (Enum == 13) then
											Stk[Inst[2]] = Stk[Inst[3]][Inst[5 - 1]];
										else
											Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4 + 0]];
										end
									elseif (Enum <= 15) then
										Stk[Inst[1476 - (1329 + 145)]] = Inst[3] ~= 0;
									elseif (Enum == 16) then
										local FlatIdent_6147E = 971 - (140 + 831);
										local A;
										local Results;
										local Limit;
										local Edx;
										while true do
											if (FlatIdent_6147E ~= 1) then
											else
												Top = (Limit + A) - 1;
												Edx = 1850 - (1409 + 441);
												FlatIdent_6147E = 2;
											end
											if (FlatIdent_6147E ~= (720 - (15 + 703))) then
											else
												for Idx = A, Top do
													Edx = Edx + 1 + 0;
													Stk[Idx] = Results[Edx];
												end
												break;
											end
											if (FlatIdent_6147E ~= 0) then
											else
												A = Inst[440 - (262 + 176)];
												Results, Limit = _R(Stk[A](Unpack(Stk, A + (1722 - (345 + 1376)), Inst[3])));
												FlatIdent_6147E = 1;
											end
										end
									else
										Env[Inst[691 - (198 + 490)]] = Stk[Inst[8 - 6]];
									end
								elseif (Enum <= 20) then
									if (Enum <= (42 - 24)) then
										Upvalues[Inst[1209 - (696 + 510)]] = Stk[Inst[3 - 1]];
									elseif (Enum == (1281 - (1091 + 171))) then
										local FlatIdent_E652 = 0;
										local A;
										while true do
											if ((0 + 0) ~= FlatIdent_E652) then
											else
												A = Inst[2];
												Stk[A](Unpack(Stk, A + (3 - 2), Inst[9 - 6]));
												break;
											end
										end
									else
										local A = Inst[2];
										local C = Inst[378 - (123 + 251)];
										local CB = A + 2;
										local Result = {Stk[A](Stk[A + (699 - (208 + 490))], Stk[CB])};
										for Idx = 1, C do
											Stk[CB + Idx] = Result[Idx];
										end
										local R = Result[1 + 0];
										if R then
											Stk[CB] = R;
											VIP = Inst[2 + 1];
										else
											VIP = VIP + (837 - (660 + 176));
										end
									end
								elseif (Enum <= 22) then
									if (Enum > 21) then
										local FlatIdent_27957 = 0 + 0;
										local A;
										while true do
											if (0 ~= FlatIdent_27957) then
											else
												A = Inst[204 - (14 + 188)];
												Stk[A] = Stk[A](Unpack(Stk, A + (676 - (534 + 141)), Top));
												break;
											end
										end
									else
										local FlatIdent_77C29 = 0;
										local A;
										while true do
											if (FlatIdent_77C29 ~= 0) then
											else
												A = Inst[1 + 1];
												Stk[A](Stk[A + 1]);
												break;
											end
										end
									end
								elseif (Enum > (21 + 2)) then
									Stk[Inst[2]] = Wrap(Proto[Inst[3 + 0]], nil, Env);
								else
									Stk[Inst[3 - 1]] = Stk[Inst[4 - 1]][Inst[11 - 7]];
								end
							elseif (Enum <= (20 + 17)) then
								if (Enum <= 30) then
									if (Enum <= 27) then
										if (Enum <= (16 + 9)) then
											Stk[Inst[2]]();
										elseif (Enum > 26) then
											Stk[Inst[2]] = Upvalues[Inst[399 - (115 + 281)]];
										else
											Stk[Inst[2]] = Stk[Inst[6 - 3]][Stk[Inst[4]]];
										end
									elseif (Enum <= 28) then
										local FlatIdent_703C8 = 0;
										local A;
										local Cls;
										while true do
											if (FlatIdent_703C8 ~= (0 + 0)) then
											else
												A = Inst[2];
												Cls = {};
												FlatIdent_703C8 = 1;
											end
											if (FlatIdent_703C8 ~= (2 - 1)) then
											else
												for Idx = 3 - 2, #Lupvals do
													local FlatIdent_1B51D = 867 - (550 + 317);
													local List;
													while true do
														if (FlatIdent_1B51D ~= 0) then
														else
															List = Lupvals[Idx];
															for Idz = 0, #List do
																local Upv = List[Idz];
																local NStk = Upv[1 - 0];
																local DIP = Upv[2];
																if ((NStk == Stk) and (DIP >= A)) then
																	local FlatIdent_7699F = 0;
																	while true do
																		if (FlatIdent_7699F ~= 0) then
																		else
																			Cls[DIP] = NStk[DIP];
																			Upv[1] = Cls;
																			break;
																		end
																	end
																end
															end
															break;
														end
													end
												end
												break;
											end
										end
									elseif (Enum == (40 - 11)) then
										local A = Inst[2];
										local T = Stk[A];
										local B = Inst[8 - 5];
										for Idx = 286 - (134 + 151), B do
											T[Idx] = Stk[A + Idx];
										end
									else
										local FlatIdent_17196 = 1665 - (970 + 695);
										local A;
										local Results;
										local Edx;
										while true do
											if (FlatIdent_17196 ~= 1) then
											else
												Edx = 0;
												for Idx = A, Inst[7 - 3] do
													local FlatIdent_5BA5E = 1990 - (582 + 1408);
													while true do
														if (FlatIdent_5BA5E == (0 - 0)) then
															Edx = Edx + (1 - 0);
															Stk[Idx] = Results[Edx];
															break;
														end
													end
												end
												break;
											end
											if (FlatIdent_17196 == 0) then
												A = Inst[7 - 5];
												Results = {Stk[A](Unpack(Stk, A + 1, Inst[1827 - (1195 + 629)]))};
												FlatIdent_17196 = 1;
											end
										end
									end
								elseif (Enum <= 33) then
									if (Enum <= (40 - 9)) then
										local A = Inst[2];
										do
											return Stk[A](Unpack(Stk, A + (242 - (187 + 54)), Inst[783 - (162 + 618)]));
										end
									elseif (Enum > (23 + 9)) then
										Stk[Inst[2]] = Stk[Inst[3]];
									elseif (Stk[Inst[2]] == Inst[4]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum <= 35) then
									if (Enum == 34) then
										VIP = Inst[2 + 1];
									else
										local A = Inst[3 - 1];
										local Results, Limit = _R(Stk[A](Stk[A + 1]));
										Top = (Limit + A) - (1 - 0);
										local Edx = 0 + 0;
										for Idx = A, Top do
											local FlatIdent_74348 = 0;
											while true do
												if (FlatIdent_74348 ~= (1636 - (1373 + 263))) then
												else
													Edx = Edx + (1001 - (451 + 549));
													Stk[Idx] = Results[Edx];
													break;
												end
											end
										end
									end
								elseif (Enum > (12 + 24)) then
									local FlatIdent_759F1 = 0;
									local A;
									while true do
										if (0 == FlatIdent_759F1) then
											A = Inst[2 - 0];
											Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
											break;
										end
									end
								else
									Stk[Inst[2 - 0]] = {};
								end
							elseif (Enum <= 43) then
								if (Enum <= (1424 - (746 + 638))) then
									if (Enum <= 38) then
										local FlatIdent_324DE = 0 + 0;
										local A;
										while true do
											if (0 ~= FlatIdent_324DE) then
											else
												A = Inst[2 - 0];
												do
													return Unpack(Stk, A, A + Inst[3]);
												end
												break;
											end
										end
									elseif (Enum > (380 - (218 + 123))) then
										if (Stk[Inst[2]] ~= Stk[Inst[4]]) then
											VIP = VIP + 1;
										else
											VIP = Inst[3];
										end
									else
										local FlatIdent_35A31 = 1581 - (1535 + 46);
										local A;
										local B;
										while true do
											if (FlatIdent_35A31 ~= 0) then
											else
												A = Inst[2 + 0];
												B = Stk[Inst[1 + 2]];
												FlatIdent_35A31 = 1;
											end
											if (FlatIdent_35A31 ~= 1) then
											else
												Stk[A + 1] = B;
												Stk[A] = B[Inst[564 - (306 + 254)]];
												break;
											end
										end
									end
								elseif (Enum <= (3 + 38)) then
									local FlatIdent_64E40 = 0;
									local A;
									while true do
										if (FlatIdent_64E40 == 0) then
											A = Inst[2];
											Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
											break;
										end
									end
								elseif (Enum == (81 - 39)) then
									Stk[Inst[1469 - (899 + 568)]][Inst[2 + 1]] = Stk[Inst[4]];
								else
									do
										return;
									end
								end
							elseif (Enum <= (111 - 65)) then
								if (Enum <= (647 - (268 + 335))) then
									Stk[Inst[2]] = Stk[Inst[293 - (60 + 230)]] * Stk[Inst[576 - (426 + 146)]];
								elseif (Enum == 45) then
									do
										return Stk[Inst[2]];
									end
								else
									local FlatIdent_8D1A5 = 0;
									local A;
									local Results;
									local Edx;
									while true do
										if (0 == FlatIdent_8D1A5) then
											A = Inst[1 + 1];
											Results = {Stk[A](Unpack(Stk, A + 1, Top))};
											FlatIdent_8D1A5 = 1;
										end
										if (1 ~= FlatIdent_8D1A5) then
										else
											Edx = 1456 - (282 + 1174);
											for Idx = A, Inst[4] do
												local FlatIdent_6DC53 = 811 - (569 + 242);
												while true do
													if ((0 - 0) == FlatIdent_6DC53) then
														Edx = Edx + 1;
														Stk[Idx] = Results[Edx];
														break;
													end
												end
											end
											break;
										end
									end
								end
							elseif (Enum <= 48) then
								if (Enum > 47) then
									for Idx = Inst[1 + 1], Inst[3] do
										Stk[Idx] = nil;
									end
								else
									local A = Inst[1026 - (706 + 318)];
									Stk[A] = Stk[A](Stk[A + 1]);
								end
							elseif (Enum > 49) then
								Stk[Inst[2]] = Stk[Inst[1254 - (721 + 530)]];
							elseif (Stk[Inst[1273 - (945 + 326)]] < Stk[Inst[4]]) then
								VIP = VIP + (2 - 1);
							else
								VIP = Inst[3 + 0];
							end
						elseif (Enum <= (775 - (271 + 429))) then
							if (Enum <= (57 + 5)) then
								if (Enum <= 56) then
									if (Enum <= (1553 - (1408 + 92))) then
										if (Enum <= 51) then
											Stk[Inst[1088 - (461 + 625)]] = Env[Inst[1291 - (993 + 295)]];
										elseif (Enum > (3 + 49)) then
											local FlatIdent_61EE = 0;
											local A;
											local Results;
											local Edx;
											while true do
												if ((1171 - (418 + 753)) ~= FlatIdent_61EE) then
												else
													A = Inst[1 + 1];
													Results = {Stk[A](Unpack(Stk, A + 1 + 0, Top))};
													FlatIdent_61EE = 1 + 0;
												end
												if (1 == FlatIdent_61EE) then
													Edx = 529 - (406 + 123);
													for Idx = A, Inst[4] do
														local FlatIdent_6C033 = 0;
														while true do
															if ((1769 - (1749 + 20)) ~= FlatIdent_6C033) then
															else
																Edx = Edx + 1 + 0;
																Stk[Idx] = Results[Edx];
																break;
															end
														end
													end
													break;
												end
											end
										else
											Stk[Inst[1324 - (1249 + 73)]][Inst[2 + 1]] = Inst[4];
										end
									elseif (Enum <= 54) then
										Stk[Inst[1147 - (466 + 679)]][Inst[6 - 3]] = Inst[11 - 7];
									elseif (Enum > (1955 - (106 + 1794))) then
										Stk[Inst[2]] = Stk[Inst[1 + 2]] - Stk[Inst[2 + 2]];
									else
										local FlatIdent_2DB3E = 0;
										local NewProto;
										local NewUvals;
										local Indexes;
										while true do
											if (FlatIdent_2DB3E == (2 - 1)) then
												Indexes = {};
												NewUvals = Setmetatable({}, {[LUAOBFUSACTOR_DECRYPT_STR_0("\28\242\35\203\248\38\213", "\156\67\173\74\165")]=function(_, Key)
													local FlatIdent_5B2CE = 0 - 0;
													local Val;
													while true do
														if (FlatIdent_5B2CE ~= (114 - (4 + 110))) then
														else
															Val = Indexes[Key];
															return Val[1][Val[2]];
														end
													end
												end,[LUAOBFUSACTOR_DECRYPT_STR_0("\11\136\71\19\171\47\72\48\178\81", "\38\84\215\41\118\220\70")]=function(_, Key, Value)
													local FlatIdent_2E9CB = 0;
													local Val;
													while true do
														if (FlatIdent_2E9CB ~= 0) then
														else
															Val = Indexes[Key];
															Val[585 - (57 + 527)][Val[1429 - (41 + 1386)]] = Value;
															break;
														end
													end
												end});
												FlatIdent_2DB3E = 105 - (17 + 86);
											end
											if (FlatIdent_2DB3E == 0) then
												NewProto = Proto[Inst[3 + 0]];
												NewUvals = nil;
												FlatIdent_2DB3E = 1;
											end
											if (2 ~= FlatIdent_2DB3E) then
											else
												for Idx = 1 - 0, Inst[11 - 7] do
													VIP = VIP + (167 - (122 + 44));
													local Mvm = Instr[VIP];
													if (Mvm[1] == (56 - 23)) then
														Indexes[Idx - 1] = {Stk,Mvm[1 + 2]};
													else
														Indexes[Idx - (1 - 0)] = {Upvalues,Mvm[3]};
													end
													Lupvals[#Lupvals + 1] = Indexes;
												end
												Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
												break;
											end
										end
									end
								elseif (Enum <= (41 + 18)) then
									if (Enum <= (1314 - (1043 + 214))) then
										local FlatIdent_6F99F = 0 - 0;
										local B;
										local K;
										while true do
											if (FlatIdent_6F99F ~= (1212 - (323 + 889))) then
											else
												B = Inst[3];
												K = Stk[B];
												FlatIdent_6F99F = 2 - 1;
											end
											if (FlatIdent_6F99F ~= 1) then
											else
												for Idx = B + 1, Inst[584 - (361 + 219)] do
													K = K .. Stk[Idx];
												end
												Stk[Inst[2]] = K;
												break;
											end
										end
									elseif (Enum == (378 - (53 + 267))) then
										local FlatIdent_29E69 = 0 + 0;
										local A;
										while true do
											if (FlatIdent_29E69 ~= (413 - (15 + 398))) then
											else
												A = Inst[2];
												Stk[A](Unpack(Stk, A + 1, Inst[985 - (18 + 964)]));
												break;
											end
										end
									elseif (Stk[Inst[7 - 5]] == Inst[3 + 1]) then
										VIP = VIP + 1 + 0;
									else
										VIP = Inst[3];
									end
								elseif (Enum <= (910 - (20 + 830))) then
									local A = Inst[2 + 0];
									Stk[A](Unpack(Stk, A + 1, Top));
								elseif (Enum == (187 - (116 + 10))) then
									local A = Inst[2];
									local B = Stk[Inst[1 + 2]];
									Stk[A + (739 - (542 + 196))] = B;
									Stk[A] = B[Inst[8 - 4]];
								else
									local FlatIdent_253F0 = 0;
									local B;
									local K;
									while true do
										if (0 ~= FlatIdent_253F0) then
										else
											B = Inst[1 + 2];
											K = Stk[B];
											FlatIdent_253F0 = 1;
										end
										if ((1 + 0) ~= FlatIdent_253F0) then
										else
											for Idx = B + 1 + 0, Inst[10 - 6] do
												K = K .. Stk[Idx];
											end
											Stk[Inst[2]] = K;
											break;
										end
									end
								end
							elseif (Enum <= (174 - 106)) then
								if (Enum <= (1616 - (1126 + 425))) then
									if (Enum <= 63) then
										local FlatIdent_466B2 = 0;
										local B;
										while true do
											if (FlatIdent_466B2 ~= 0) then
											else
												B = Stk[Inst[409 - (118 + 287)]];
												if B then
													VIP = VIP + 1;
												else
													local FlatIdent_6B9E2 = 0 - 0;
													while true do
														if (FlatIdent_6B9E2 ~= (1121 - (118 + 1003))) then
														else
															Stk[Inst[5 - 3]] = B;
															VIP = Inst[380 - (142 + 235)];
															break;
														end
													end
												end
												break;
											end
										end
									elseif (Enum == 64) then
										local FlatIdent_1A54 = 0 - 0;
										local A;
										while true do
											if (0 ~= FlatIdent_1A54) then
											else
												A = Inst[1 + 1];
												Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[980 - (553 + 424)]));
												break;
											end
										end
									else
										local FlatIdent_61800 = 0 - 0;
										local A;
										local Results;
										local Limit;
										local Edx;
										while true do
											if (FlatIdent_61800 == (2 + 0)) then
												for Idx = A, Top do
													Edx = Edx + 1 + 0;
													Stk[Idx] = Results[Edx];
												end
												break;
											end
											if (FlatIdent_61800 ~= 1) then
											else
												Top = (Limit + A) - (1 + 0);
												Edx = 0;
												FlatIdent_61800 = 1 + 1;
											end
											if (FlatIdent_61800 ~= 0) then
											else
												A = Inst[2 + 0];
												Results, Limit = _R(Stk[A](Unpack(Stk, A + (2 - 1), Inst[3])));
												FlatIdent_61800 = 1;
											end
										end
									end
								elseif (Enum <= (183 - 117)) then
									if not Stk[Inst[4 - 2]] then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum > (20 + 47)) then
									Stk[Inst[9 - 7]] = {};
								else
									Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
								end
							elseif (Enum <= 71) then
								if (Enum <= (822 - (239 + 514))) then
									if (Stk[Inst[1 + 1]] < Inst[1333 - (797 + 532)]) then
										VIP = VIP + 1 + 0;
									else
										VIP = Inst[2 + 1];
									end
								elseif (Enum == (164 - 94)) then
									if (Inst[1204 - (373 + 829)] < Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[734 - (476 + 255)];
									end
								elseif not Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[1133 - (369 + 761)];
								end
							elseif (Enum <= (43 + 30)) then
								if (Enum == 72) then
									local A = Inst[2 - 0];
									Stk[A] = Stk[A]();
								else
									Stk[Inst[3 - 1]] = Stk[Inst[241 - (64 + 174)]] / Inst[1 + 3];
								end
							elseif (Enum == (108 - 34)) then
								do
									return;
								end
							else
								local FlatIdent_70003 = 336 - (144 + 192);
								local NewProto;
								local NewUvals;
								local Indexes;
								while true do
									if (FlatIdent_70003 == (216 - (42 + 174))) then
										NewProto = Proto[Inst[3 + 0]];
										NewUvals = nil;
										FlatIdent_70003 = 1 + 0;
									end
									if (FlatIdent_70003 ~= (1 + 1)) then
									else
										for Idx = 1, Inst[1508 - (363 + 1141)] do
											local FlatIdent_1B881 = 1580 - (1183 + 397);
											local Mvm;
											while true do
												if (FlatIdent_1B881 ~= (2 - 1)) then
												else
													if (Mvm[1 + 0] == 33) then
														Indexes[Idx - 1] = {Stk,Mvm[3]};
													else
														Indexes[Idx - (1 + 0)] = {Upvalues,Mvm[2 + 1]};
													end
													Lupvals[#Lupvals + (2 - 1)] = Indexes;
													break;
												end
												if (FlatIdent_1B881 ~= 0) then
												else
													VIP = VIP + 1;
													Mvm = Instr[VIP];
													FlatIdent_1B881 = 1934 - (565 + 1368);
												end
											end
										end
										Stk[Inst[7 - 5]] = Wrap(NewProto, NewUvals, Env);
										break;
									end
									if (FlatIdent_70003 ~= (1662 - (1477 + 184))) then
									else
										Indexes = {};
										NewUvals = Setmetatable({}, {[LUAOBFUSACTOR_DECRYPT_STR_0("\111\41\43\28\250\85\14", "\158\48\118\66\114")]=function(_, Key)
											local FlatIdent_35C62 = 0;
											local Val;
											while true do
												if (FlatIdent_35C62 == (0 - 0)) then
													Val = Indexes[Key];
													return Val[1 + 0][Val[858 - (564 + 292)]];
												end
											end
										end,[LUAOBFUSACTOR_DECRYPT_STR_0("\148\27\30\51\100\172\245\175\33\8", "\155\203\68\112\86\19\197")]=function(_, Key, Value)
											local FlatIdent_581C8 = 0 - 0;
											local Val;
											while true do
												if (FlatIdent_581C8 ~= 0) then
												else
													Val = Indexes[Key];
													Val[2 - 1][Val[2]] = Value;
													break;
												end
											end
										end});
										FlatIdent_70003 = 306 - (244 + 60);
									end
								end
							end
						elseif (Enum <= (68 + 20)) then
							if (Enum <= (557 - (41 + 435))) then
								if (Enum <= 78) then
									if (Enum <= 76) then
										VIP = Inst[3];
									elseif (Enum == (1078 - (938 + 63))) then
										Stk[Inst[2]] = Stk[Inst[3 + 0]] / Inst[1129 - (936 + 189)];
									else
										Stk[Inst[2]]();
									end
								elseif (Enum <= 79) then
									local FlatIdent_499B1 = 0;
									local B;
									while true do
										if (FlatIdent_499B1 ~= 0) then
										else
											B = Stk[Inst[4]];
											if B then
												VIP = VIP + 1 + 0;
											else
												Stk[Inst[1615 - (1565 + 48)]] = B;
												VIP = Inst[2 + 1];
											end
											break;
										end
									end
								elseif (Enum == 80) then
									local FlatIdent_1FC27 = 0;
									local A;
									local Cls;
									while true do
										if (FlatIdent_1FC27 == (1139 - (782 + 356))) then
											for Idx = 1, #Lupvals do
												local List = Lupvals[Idx];
												for Idz = 267 - (176 + 91), #List do
													local Upv = List[Idz];
													local NStk = Upv[1];
													local DIP = Upv[4 - 2];
													if ((NStk == Stk) and (DIP >= A)) then
														Cls[DIP] = NStk[DIP];
														Upv[1] = Cls;
													end
												end
											end
											break;
										end
										if (FlatIdent_1FC27 ~= 0) then
										else
											A = Inst[2];
											Cls = {};
											FlatIdent_1FC27 = 1 - 0;
										end
									end
								else
									Stk[Inst[1094 - (975 + 117)]] = not Stk[Inst[3]];
								end
							elseif (Enum <= 84) then
								if (Enum <= (1957 - (157 + 1718))) then
									Env[Inst[3 + 0]] = Stk[Inst[6 - 4]];
								elseif (Enum > (283 - 200)) then
									Stk[Inst[2]][Inst[1021 - (697 + 321)]] = Stk[Inst[4]];
								elseif (Stk[Inst[2]] < Inst[4]) then
									VIP = VIP + (2 - 1);
								else
									VIP = Inst[5 - 2];
								end
							elseif (Enum <= 86) then
								if (Enum > 85) then
									local A = Inst[2];
									local C = Inst[4];
									local CB = A + 2;
									local Result = {Stk[A](Stk[A + 1 + 0], Stk[CB])};
									for Idx = 1 - 0, C do
										Stk[CB + Idx] = Result[Idx];
									end
									local R = Result[1];
									if R then
										local FlatIdent_6E23 = 0 - 0;
										while true do
											if (FlatIdent_6E23 == (1227 - (322 + 905))) then
												Stk[CB] = R;
												VIP = Inst[614 - (602 + 9)];
												break;
											end
										end
									else
										VIP = VIP + (1190 - (449 + 740));
									end
								elseif (Stk[Inst[2]] < Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[875 - (826 + 46)];
								end
							elseif (Enum == 87) then
								local FlatIdent_8ABD6 = 0;
								local A;
								local T;
								local B;
								while true do
									if (FlatIdent_8ABD6 ~= 0) then
									else
										A = Inst[2];
										T = Stk[A];
										FlatIdent_8ABD6 = 1;
									end
									if (FlatIdent_8ABD6 == 1) then
										B = Inst[950 - (245 + 702)];
										for Idx = 1, B do
											T[Idx] = Stk[A + Idx];
										end
										break;
									end
								end
							else
								Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
							end
						elseif (Enum <= 94) then
							if (Enum <= (287 - 196)) then
								if (Enum <= (29 + 60)) then
									Stk[Inst[1900 - (260 + 1638)]] = Upvalues[Inst[3]];
								elseif (Enum == 90) then
									Upvalues[Inst[3]] = Stk[Inst[2]];
								else
									local FlatIdent_2E34E = 0;
									local A;
									local Results;
									local Limit;
									local Edx;
									while true do
										if (FlatIdent_2E34E ~= 0) then
										else
											A = Inst[2];
											Results, Limit = _R(Stk[A](Stk[A + (441 - (382 + 58))]));
											FlatIdent_2E34E = 1;
										end
										if (FlatIdent_2E34E == 2) then
											for Idx = A, Top do
												Edx = Edx + (3 - 2);
												Stk[Idx] = Results[Edx];
											end
											break;
										end
										if (FlatIdent_2E34E == (1 + 0)) then
											Top = (Limit + A) - 1;
											Edx = 0 - 0;
											FlatIdent_2E34E = 5 - 3;
										end
									end
								end
							elseif (Enum <= (1297 - (902 + 303))) then
								if (Stk[Inst[2]] ~= Stk[Inst[8 - 4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[6 - 3];
								end
							elseif (Enum == (8 + 85)) then
								local FlatIdent_1D5FF = 0;
								local A;
								while true do
									if (FlatIdent_1D5FF ~= 0) then
									else
										A = Inst[2];
										Stk[A] = Stk[A]();
										break;
									end
								end
							else
								Stk[Inst[1692 - (1121 + 569)]] = Stk[Inst[3]] * Stk[Inst[218 - (22 + 192)]];
							end
						elseif (Enum <= (780 - (483 + 200))) then
							if (Enum <= (1558 - (1404 + 59))) then
								Stk[Inst[5 - 3]] = not Stk[Inst[3]];
							elseif (Enum > (128 - 32)) then
								Stk[Inst[767 - (468 + 297)]] = Inst[565 - (334 + 228)];
							else
								Stk[Inst[6 - 4]] = Stk[Inst[3]] - Stk[Inst[8 - 4]];
							end
						elseif (Enum <= 99) then
							if (Enum == 98) then
								do
									return Stk[Inst[2 - 0]];
								end
							else
								Stk[Inst[2]] = Stk[Inst[1 + 2]][Stk[Inst[240 - (141 + 95)]]];
							end
						elseif (Enum == 100) then
							local FlatIdent_5C0FA = 0;
							local A;
							local T;
							while true do
								if (FlatIdent_5C0FA ~= (0 + 0)) then
								else
									A = Inst[4 - 2];
									T = Stk[A];
									FlatIdent_5C0FA = 1;
								end
								if (FlatIdent_5C0FA ~= 1) then
								else
									for Idx = A + (2 - 1), Inst[1 + 2] do
										Insert(T, Stk[Idx]);
									end
									break;
								end
							end
						else
							local FlatIdent_21297 = 0;
							local A;
							while true do
								if (FlatIdent_21297 ~= 0) then
								else
									A = Inst[5 - 3];
									Stk[A](Stk[A + 1 + 0]);
									break;
								end
							end
						end
						VIP = VIP + 1;
						break;
					end
					if (FlatIdent_10DED ~= 0) then
					else
						Inst = Instr[VIP];
						Enum = Inst[1];
						FlatIdent_10DED = 1 + 0;
					end
				end
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCalletFEnv(), ...);
